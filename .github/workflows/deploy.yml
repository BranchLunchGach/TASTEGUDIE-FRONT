name: Build, Deploy, and Update EC2

on:
  push:
    branches:
      - main  # main에 푸시할 때 트리거

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # 'contents' 권한을 'write'로 설정하여 푸시 권한 부여

    steps:
      # 1. 리포지토리 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v2

      # 2. Node.js 설치
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'  # 필요한 Node.js 버전으로 수정

      # 3. 환경 변수 적용 (Secrets에서 가져오기)
      - name: Set up environment variables
        run: |
          echo "${{ secrets.ENV }}" > .env
        env:
          ENV: ${{ secrets.ENV }}  # GitHub Secrets에 저장된 ENV 변수 사용

      # 4. 의존성 설치 및 빌드
      - name: Install dependencies and build
        run: |
          npm install
          npm run build
        env:
          CI: false  # CI 환경 변수를 false로 설정하여 ESLint 경고를 무시

      # 5. AWS CLI 설치 (기존 APT 방식 대신 공식 설치 스크립트 사용)
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update  # 이미 설치된 버전이 있으면 업데이트
          aws --version  # 설치 확인

      # 6. AWS 설정 (명시적으로 자격증명 경로 설정)
      - name: Configure AWS
        run: |
          mkdir -p ~/.aws  # .aws 디렉토리 생성
          
          # 자격증명 정보 작성
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          
          # 리전 정보 작성
          echo "[default]" > ~/.aws/config
          echo "region=${{ secrets.AWS_REGION }}" >> ~/.aws/config

          # 환경 변수 설정
          export AWS_SHARED_CREDENTIALS_FILE=~/.aws/credentials  # 자격증명 파일 경로 지정

          # 자격증명 파일이 제대로 생성되었는지 확인
          cat ~/.aws/credentials
          cat ~/.aws/config

          # AWS CLI 명령어 실행하여 자격증명 확인
          aws sts get-caller-identity || exit 1  # 자격증명 확인 실패 시 워크플로우 종료
          aws --version  # AWS CLI 버전 확인

      # 7. 빌드 파일을 S3로 업로드 (덮어쓰기, TASTEGUDIE-FRONT 폴더에 업로드)
      - name: Upload to S3
        run: |
          aws s3 cp build/ s3://tasteguide/TASTEGUDIE-FRONT/ --recursive  # build 폴더를 TASTEGUDIE-FRONT 폴더에 업로드

      # 8. EC2에 SSH로 접속하여 S3에서 파일 다운로드 후 Nginx 재시작
      - name: Deploy to EC2 and Restart Nginx
        run: |
          # SSH 개인키 저장
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private-key.pem
          chmod 600 private-key.pem
          
          # private-key.pem 파일이 올바르게 생성되었는지 확인
          cat private-key.pem  # private-key.pem의 내용을 출력해 확인

          # EC2와의 SSH 연결 확인
          ssh -o StrictHostKeyChecking=no -i private-key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }} "echo 'SSH 연결 성공'"

          # S3에서 파일 다운로드
          ssh -o StrictHostKeyChecking=no -i private-key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }} \
            "aws s3 cp s3://tasteguide/TASTEGUDIE-FRONT/ /home/ubuntu/TASTEGUDIE-FRONT --recursive && \
            sudo systemctl restart nginx"
        env:
          EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_IP: ${{ secrets.EC2_IP }}
